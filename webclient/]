import { useEffect, useState } from "react";
import { useAuth } from "../auth-provider.tsx";
import { Collection, Link, Resource } from "./links.ts";

/*
type ErrorResponse struct {
	Error string `json:"error"`
}
*/

interface ErrorResponse {
  error: string;
}

export function useAPIResource<T extends Resource>(
  link: Link,
) {
  const [data, setData] = useState<T | undefined>(undefined);
  const [fetching, setFetching] = useState<boolean>(false);
  const [errored, setErrored] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string>("");
  const auth = useAuth();

  useEffect(() => {
    setFetching(true);
    setErrored(false);
    fetch(link.href, {
      headers: {
        "Authorization": `Bearer ${auth.accessToken}`,
      },
    })
      .then((res) => res.json())
      .then((dat: T) => setData(dat))
      .catch((e) => {
        console.log(e);
        setErrored(true);
        setErrorMessage(e);
        setData(undefined);
      })
      .finally(() => setFetching(false));
  }, [link]);

  return {
    resource: data,
    fetching: fetching,
    errored: errored,
    errorMessage: errorMessage,
  };
}

export function useAPICollection<T extends Collection>(
  link: Link,
) {
  const [data, setData] = useState<T | undefined>(undefined);
  const [fetching, setFetching] = useState<boolean>(false);
  const [errored, setErrored] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string>("");
  const auth = useAuth();

  useEffect(() => {
    setFetching(true);
    setErrored(false);
    fetch(link.href, {
      headers: {
        "Authorization": `Bearer ${auth.accessToken}`,
      },
    })
      .then((res) => res.json())
      .then((dat: T) => setData(dat))
      .catch((e) => {
        console.log(e);
        setErrored(true);
        setData(undefined);
        setErrorMessage;
      })
      .finally(() => setFetching(false));
  }, [link]);

  return {
    resource: data,
    fetching: fetching,
    errored: errored,
    errorMessage: errorMessage,
  };
}

export function useAPIMutation<T extends Resource>(link: Link) {
  const [mutating, setMutating] = useState<boolean>(false);
  const [errored, setErrored] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string>("");
  const auth = useAuth();

  const mutate = async function Partial<T>(updatedDat: T) {
    setErrored(false);
    setMutating(true);

    const res = await fetch(link.href, {
      method: link.method,
      headers: { "Authorization": `Bearer ${auth.accessToken}` },
      body: JSON.stringify(updatedDat),
    });

    if (!res.ok) {
      const e: ErrorResponse = await res.json();
      setErrorMessage(e.error);
      throw Error(e.error);
    }

    const dat: T = await res.json();
    return dat;
  };

  return {
    mutate: mutate,
    mutating: mutating,
    errored: errored,
    errorMessage: errorMessage,
  };
}
