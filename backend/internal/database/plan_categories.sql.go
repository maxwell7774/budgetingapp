// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plan_categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPlanCategory = `-- name: CreatePlanCategory :one
INSERT INTO plan_categories(
    id,
    plan_id,
    name,
    deposit,
    withdrawl,
    created_at,
    updated_at
)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, plan_id, name, deposit, withdrawl, created_at, updated_at
`

type CreatePlanCategoryParams struct {
	PlanID    uuid.UUID
	Name      string
	Deposit   int32
	Withdrawl int32
}

func (q *Queries) CreatePlanCategory(ctx context.Context, arg CreatePlanCategoryParams) (PlanCategory, error) {
	row := q.db.QueryRowContext(ctx, createPlanCategory,
		arg.PlanID,
		arg.Name,
		arg.Deposit,
		arg.Withdrawl,
	)
	var i PlanCategory
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.Name,
		&i.Deposit,
		&i.Withdrawl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlanCategories = `-- name: GetPlanCategories :many
SELECT id, plan_id, name, deposit, withdrawl, created_at, updated_at
FROM plan_categories
WHERE plan_id = $1
`

func (q *Queries) GetPlanCategories(ctx context.Context, planID uuid.UUID) ([]PlanCategory, error) {
	rows, err := q.db.QueryContext(ctx, getPlanCategories, planID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlanCategory
	for rows.Next() {
		var i PlanCategory
		if err := rows.Scan(
			&i.ID,
			&i.PlanID,
			&i.Name,
			&i.Deposit,
			&i.Withdrawl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
