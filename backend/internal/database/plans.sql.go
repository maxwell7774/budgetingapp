// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plans.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countPlansForOwner = `-- name: CountPlansForOwner :one
SELECT COUNT(*)
FROM plans
WHERE owner_id = $1
AND name ILIKE '%' || $2 || '%'
`

type CountPlansForOwnerParams struct {
	OwnerID uuid.UUID
	Keyword sql.NullString
}

func (q *Queries) CountPlansForOwner(ctx context.Context, arg CountPlansForOwnerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPlansForOwner, arg.OwnerID, arg.Keyword)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans(
    id,
    owner_id,
    name,
    created_at,
    updated_at
)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, owner_id, name, created_at, updated_at
`

type CreatePlanParams struct {
	OwnerID uuid.UUID
	Name    string
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, createPlan, arg.OwnerID, arg.Name)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE id = $1
`

func (q *Queries) DeletePlan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlan, id)
	return err
}

const getPlanByID = `-- name: GetPlanByID :one
SELECT id, owner_id, name, created_at, updated_at
FROM plans
WHERE id = $1
`

func (q *Queries) GetPlanByID(ctx context.Context, id uuid.UUID) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlanByID, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlansForOwner = `-- name: GetPlansForOwner :many
SELECT id, owner_id, name, created_at, updated_at
FROM plans
WHERE owner_id = $1
AND name ILIKE '%' || $4 || '%'
LIMIT $2 OFFSET $3
`

type GetPlansForOwnerParams struct {
	OwnerID uuid.UUID
	Limit   int32
	Offset  int32
	Keyword sql.NullString
}

func (q *Queries) GetPlansForOwner(ctx context.Context, arg GetPlansForOwnerParams) ([]Plan, error) {
	rows, err := q.db.QueryContext(ctx, getPlansForOwner,
		arg.OwnerID,
		arg.Limit,
		arg.Offset,
		arg.Keyword,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlanName = `-- name: UpdatePlanName :one
UPDATE plans
SET
    name = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, owner_id, name, created_at, updated_at
`

type UpdatePlanNameParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdatePlanName(ctx context.Context, arg UpdatePlanNameParams) (Plan, error) {
	row := q.db.QueryRowContext(ctx, updatePlanName, arg.Name, arg.ID)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
